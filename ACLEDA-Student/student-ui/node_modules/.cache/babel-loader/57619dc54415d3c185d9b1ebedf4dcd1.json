{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\src\\\\app\\\\views\\\\applications\\\\messagePopUp\\\\PrivateChatPopUpMessage.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nimport '../../../../styles/privateChatPopUpMessage.css';\nimport useAuth from \"../../../hooks/useAuth\"; // Updated import path\n\nvar PrivateChatPopUpMessage = function PrivateChatPopUpMessage(popUpUsername) {\n  var auth = useAuth();\n  console.log(\"auth\", auth);\n  var currentUser = auth.user.username;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isConnected = _useState2[0],\n    setIsConnected = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    messages = _useState4[0],\n    setMessages = _useState4[1];\n  var stompClientRef = useRef(null);\n  var username = 'userA'; // Assuming the username comes from somewhere\n\n  useEffect(function () {\n    if (!username) return;\n    var token = localStorage.getItem('accessToken');\n\n    // WebSocket connection using SockJS\n    var socket = new SockJS(\"http://localhost:8080/ws?token=\".concat(token));\n\n    // Creating the STOMP client\n    var stompClient = new Client({\n      webSocketFactory: function webSocketFactory() {\n        socket.onopen = function () {\n          // Injecting headers on WebSocket connection\n          socket.send('Authorization', \"Bearer \".concat(token));\n        };\n        return socket;\n      },\n      connectHeaders: {\n        Authorization: \"Bearer \".concat(token) // Make sure header is included\n      },\n\n      reconnectDelay: 5000,\n      onConnect: function onConnect() {\n        console.log('✅ Connected');\n        setIsConnected(true); // Track connection status\n\n        // Subscribe to the chat messages\n        stompClient.subscribe(\"/user/queue/messages\", function (message) {\n          var msg = JSON.parse(message.body);\n          setMessages(function (prev) {\n            return [].concat(_toConsumableArray(prev), [msg]);\n          });\n        });\n\n        // Example of sending a message\n        stompClient.publish({\n          destination: \"/app/private-message\",\n          body: JSON.stringify({\n            sender: username,\n            receiver: popUpUsername,\n            content: \"Hello!\"\n          })\n        });\n      },\n      onStompError: function onStompError(frame) {\n        console.error('❌ STOMP Error', frame);\n      }\n    });\n\n    // Activate the client\n    stompClient.activate();\n    stompClientRef.current = stompClient;\n\n    // Cleanup on component unmount\n    return function () {\n      if (stompClientRef.current) {\n        stompClientRef.current.deactivate();\n      }\n    };\n  }, [username, popUpUsername]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, isConnected && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"status-bar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, \"Connected\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, messages.map(function (message, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"message \".concat(message.sender === username ? 'sent' : 'received'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-header\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }\n    }, message.sender), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"message-time\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, new Date().toLocaleTimeString())), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-content\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }, message.content));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-input\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Type a message...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, \"Send\")));\n};\nexport default PrivateChatPopUpMessage;","map":{"version":3,"names":["React","useEffect","useRef","useState","SockJS","Client","useAuth","PrivateChatPopUpMessage","popUpUsername","auth","console","log","currentUser","user","username","isConnected","setIsConnected","messages","setMessages","stompClientRef","token","localStorage","getItem","socket","stompClient","webSocketFactory","onopen","send","connectHeaders","Authorization","reconnectDelay","onConnect","subscribe","message","msg","JSON","parse","body","prev","publish","destination","stringify","sender","receiver","content","onStompError","frame","error","activate","current","deactivate","map","index","Date","toLocaleTimeString"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/app/views/applications/messagePopUp/PrivateChatPopUpMessage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\nimport '../../../../styles/privateChatPopUpMessage.css';\r\nimport useAuth from \"../../../hooks/useAuth\"; // Updated import path\r\n\r\nconst PrivateChatPopUpMessage = (\r\n    popUpUsername\r\n) => {\r\n    const auth = useAuth();\r\n    console.log(\"auth\", auth)\r\n    const currentUser = auth.user.username;\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const stompClientRef = useRef(null);\r\n    const username = 'userA'; // Assuming the username comes from somewhere\r\n\r\n    useEffect(() => {\r\n        if (!username) return;\r\n\r\n        const token = localStorage.getItem('accessToken');\r\n\r\n        // WebSocket connection using SockJS\r\n        const socket = new SockJS(`http://localhost:8080/ws?token=${token}`);\r\n\r\n        // Creating the STOMP client\r\n        const stompClient = new Client({\r\n            webSocketFactory: () => {\r\n                socket.onopen = () => {\r\n                    // Injecting headers on WebSocket connection\r\n                    socket.send('Authorization', `Bearer ${token}`);\r\n                };\r\n                return socket;\r\n            },\r\n            connectHeaders: {\r\n                Authorization: `Bearer ${token}`, // Make sure header is included\r\n            },\r\n            reconnectDelay: 5000,\r\n            onConnect: () => {\r\n                console.log('✅ Connected');\r\n                setIsConnected(true); // Track connection status\r\n\r\n                // Subscribe to the chat messages\r\n                stompClient.subscribe(`/user/queue/messages`, (message) => {\r\n                    const msg = JSON.parse(message.body);\r\n                    setMessages((prev) => [...prev, msg]);\r\n                });\r\n\r\n                // Example of sending a message\r\n                stompClient.publish({\r\n                    destination: \"/app/private-message\",\r\n                    body: JSON.stringify({\r\n                        sender: username,\r\n                        receiver: popUpUsername,\r\n                        content: \"Hello!\"\r\n                    })\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error('❌ STOMP Error', frame);\r\n            },\r\n        });\r\n\r\n        // Activate the client\r\n        stompClient.activate();\r\n        stompClientRef.current = stompClient;\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.deactivate();\r\n            }\r\n        };\r\n    }, [username, popUpUsername]);\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            {isConnected && <div className=\"status-bar\">Connected</div>}\r\n            <div className=\"messages-container\">\r\n                {messages.map((message, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className={`message ${message.sender === username ? 'sent' : 'received'}`}\r\n                    >\r\n                        <div className=\"message-header\">\r\n                            <strong>{message.sender}</strong>\r\n                            <span className=\"message-time\">{new Date().toLocaleTimeString()}</span>\r\n                        </div>\r\n                        <div className=\"message-content\">{message.content}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"message-input\">\r\n                <input type=\"text\" placeholder=\"Type a message...\" />\r\n                <button>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrivateChatPopUpMessage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}