{"ast":null,"code":"import _InputAdornment from \"@material-ui/core/esm/InputAdornment\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\src\\\\app\\\\c1component\\\\C1InputField.jsx\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from 'prop-types';\nimport C1Version from \"app/c1component/C1Version\";\n/**\r\n * @param label - form label for the field\r\n * @param name  - form name for the field\r\n * @param onChange - event handler\r\n * @param value - form value\r\n * @param disabled - boolean value to flag if field is disabled or not\r\n * @param required - boolean value to flag if field is required, it will be highlighted in yellow\r\n * @param type - can be file, input or date. Default is 'input'\r\n * @param multiline - boolean value to flag if field is multiline or a textarea\r\n * @param rows - no. of rows if the field is multiline\r\n * @param rowsMax - maximum no. of rows if the field is multiline\r\n * @param error - boolean value if the field has error upon validation\r\n * @param helperText - text to display if error occurs\r\n * @param select - boolean value to flag if the input field is select field\r\n * @param inputProps - additional props for input field\r\n * @param children - array of children to be passed to <TextField>, this is only applicable for select field.\r\n */\nvar C1InputField = function C1InputField(_ref) {\n  var label = _ref.label,\n    name = _ref.name,\n    onChange = _ref.onChange,\n    value = _ref.value,\n    disabled = _ref.disabled,\n    required = _ref.required,\n    type = _ref.type,\n    multiline = _ref.multiline,\n    rows = _ref.rows,\n    rowsMax = _ref.rowsMax,\n    error = _ref.error,\n    helperText = _ref.helperText,\n    select = _ref.select,\n    inputProps = _ref.inputProps,\n    style = _ref.style,\n    changes = _ref.changes,\n    _ref$isInteger = _ref.isInteger,\n    isInteger = _ref$isInteger === void 0 ? false : _ref$isInteger,\n    info = _ref.info,\n    _ref$lock = _ref.lock,\n    lock = _ref$lock === void 0 ? false : _ref$lock,\n    children = _ref.children;\n  var onChangeLocal = function onChangeLocal(e) {\n    if (type === 'number' && isInteger) {\n      var re = /^[0-9\\b]+$/;\n      if (e.target.value === \"\" || re.test(e.target.value)) {\n        onChange(e);\n      }\n    } else if (type === 'number') {\n      //for decimal values\n      var _re = /^[0-9\\b]+\\.?[0-9]*/;\n      if (e.target.value === \"\" || _re.test(e.target.value)) {\n        onChange(e);\n      }\n    } else {\n      onChange(e);\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    margin: \"normal\",\n    label: label,\n    name: name,\n    type: type || 'input',\n    fullWidth: true,\n    multiline: multiline || false,\n    rows: rows,\n    rowsMax: rowsMax,\n    size: \"medium\",\n    variant: \"outlined\",\n    onChange: onChangeLocal,\n    value: value,\n    disabled: lock ? true : disabled,\n    required: required,\n    InputLabelProps: {\n      shrink: true\n    },\n    helperText: helperText || '',\n    error: error ? error : false,\n    select: select || false,\n    className: required ? \"C1-Required\" : '',\n    inputProps: inputProps,\n    style: style,\n    InputProps: {\n      endAdornment: changes ? /*#__PURE__*/React.createElement(_InputAdornment, {\n        position: \"end\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(C1Version, {\n        changes: changes,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 72\n        }\n      })) : info ? info : null\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, children));\n};\nC1InputField.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n  multiline: PropTypes.bool,\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  error: PropTypes.bool,\n  helperText: PropTypes.string,\n  select: PropTypes.bool,\n  children: PropTypes.array\n};\nexport default C1InputField;","map":{"version":3,"names":["React","TextField","PropTypes","C1Version","C1InputField","label","name","onChange","value","disabled","required","type","multiline","rows","rowsMax","error","helperText","select","inputProps","style","changes","isInteger","info","lock","children","onChangeLocal","e","re","target","test","shrink","endAdornment","propTypes","string","any","func","bool","oneOfType","number","array"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/app/c1component/C1InputField.jsx"],"sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport PropTypes from 'prop-types';\r\nimport C1Version from \"app/c1component/C1Version\";\r\nimport { InputAdornment } from \"@material-ui/core\";\r\n\r\n/**\r\n * @param label - form label for the field\r\n * @param name  - form name for the field\r\n * @param onChange - event handler\r\n * @param value - form value\r\n * @param disabled - boolean value to flag if field is disabled or not\r\n * @param required - boolean value to flag if field is required, it will be highlighted in yellow\r\n * @param type - can be file, input or date. Default is 'input'\r\n * @param multiline - boolean value to flag if field is multiline or a textarea\r\n * @param rows - no. of rows if the field is multiline\r\n * @param rowsMax - maximum no. of rows if the field is multiline\r\n * @param error - boolean value if the field has error upon validation\r\n * @param helperText - text to display if error occurs\r\n * @param select - boolean value to flag if the input field is select field\r\n * @param inputProps - additional props for input field\r\n * @param children - array of children to be passed to <TextField>, this is only applicable for select field.\r\n */\r\nconst C1InputField = ({\r\n    label,\r\n    name,\r\n    onChange,\r\n    value,\r\n    disabled,\r\n    required,\r\n    type,\r\n    multiline,\r\n    rows,\r\n    rowsMax,\r\n    error,\r\n    helperText,\r\n    select,\r\n    inputProps,\r\n    style,\r\n    changes,\r\n    isInteger = false,\r\n    info,\r\n    lock = false,\r\n    children\r\n}) => {\r\n\r\n    const onChangeLocal = (e) => {\r\n        if (type === 'number' && isInteger) {\r\n            const re = /^[0-9\\b]+$/;\r\n            if (e.target.value === \"\" || re.test(e.target.value)) {\r\n                onChange(e);\r\n            }\r\n        } else if (type === 'number') {//for decimal values\r\n            const re = /^[0-9\\b]+\\.?[0-9]*/;\r\n            if (e.target.value === \"\" || re.test(e.target.value)) {\r\n                onChange(e);\r\n            }\r\n        } else {\r\n            onChange(e);\r\n        }\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <TextField\r\n            margin=\"normal\"\r\n            label={label}\r\n            name={name}\r\n            type={type || 'input'}\r\n            fullWidth\r\n            multiline={multiline || false}\r\n            rows={rows}\r\n            rowsMax={rowsMax}\r\n            size=\"medium\"\r\n            variant=\"outlined\"\r\n            onChange={onChangeLocal}\r\n            value={value}\r\n            disabled={lock ? true : disabled}\r\n            required={required}\r\n            InputLabelProps={{\r\n                shrink: true\r\n            }}\r\n            helperText={helperText || ''}\r\n            error={error ? error : false}\r\n            select={select || false}\r\n            className={required ? \"C1-Required\" : ''}\r\n            inputProps={inputProps}\r\n            style={style}\r\n            InputProps={{\r\n                endAdornment: changes ? <InputAdornment position=\"end\"><C1Version changes={changes} /></InputAdornment> : info ? info : null\r\n            }}>\r\n            {children}\r\n        </TextField>\r\n    </React.Fragment >;\r\n}\r\n\r\nC1InputField.propTypes = {\r\n    label: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.any,\r\n    onChange: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    required: PropTypes.bool,\r\n    type: PropTypes.string,\r\n    multiline: PropTypes.bool,\r\n    rows: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    rowsMax: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    error: PropTypes.bool,\r\n    helperText: PropTypes.string,\r\n    select: PropTypes.bool,\r\n    children: PropTypes.array\r\n}\r\n\r\n\r\nexport default C1InputField;"],"mappings":"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"},"metadata":{},"sourceType":"module"}