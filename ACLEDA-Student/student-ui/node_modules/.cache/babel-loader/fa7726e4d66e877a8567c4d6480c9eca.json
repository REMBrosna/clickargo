{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\src\\\\app\\\\views\\\\applications\\\\messagePopUp\\\\PrivateChatPopUpMessage.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport { useAuth } from '../../hooks/useAuth'; // assuming you're using a custom auth hook\n\nvar PrivateChatPopUpMessage = function PrivateChatPopUpMessage(_ref) {\n  var _authUser$user;\n  var popUpUsername = _ref.popUpUsername;\n  var authUser = useAuth();\n  var username = authUser === null || authUser === void 0 ? void 0 : (_authUser$user = authUser.user) === null || _authUser$user === void 0 ? void 0 : _authUser$user.username;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    input = _useState4[0],\n    setInput = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isConnected = _useState6[0],\n    setIsConnected = _useState6[1];\n  var stompClientRef = useRef(null);\n  useEffect(function () {\n    if (!username || !popUpUsername) return;\n    var token = localStorage.getItem('accessToken');\n    var socket = new SockJS(\"http://localhost:8080/ws?token=\".concat(token));\n    var stompClient = new Client({\n      webSocketFactory: function webSocketFactory() {\n        return socket;\n      },\n      connectHeaders: {\n        Authorization: \"Bearer \".concat(token)\n      },\n      reconnectDelay: 5000,\n      onConnect: function onConnect() {\n        console.log('✅ Connected to WebSocket');\n        setIsConnected(true);\n\n        // Subscribe to receive messages\n        stompClient.subscribe(\"/user/\".concat(username, \"/queue/messages\"), function (message) {\n          var msg = JSON.parse(message.body);\n          if (Array.isArray(msg)) {\n            // Received old messages from DB\n            setMessages(msg);\n          } else {\n            // Real-time message\n            setMessages(function (prev) {\n              return [].concat(_toConsumableArray(prev), [msg]);\n            });\n          }\n        });\n\n        // Fetch message history from backend\n        stompClient.publish({\n          destination: '/app/chat.getMessages',\n          body: JSON.stringify({\n            sender: username,\n            receiver: popUpUsername\n          })\n        });\n      },\n      onStompError: function onStompError(frame) {\n        console.error('❌ STOMP Error', frame);\n      }\n    });\n    stompClient.activate();\n    stompClientRef.current = stompClient;\n    return function () {\n      stompClient.deactivate();\n    };\n  }, [username, popUpUsername]);\n  var sendMessage = function sendMessage() {\n    var _stompClientRef$curre;\n    if (!input.trim() || !popUpUsername || !((_stompClientRef$curre = stompClientRef.current) === null || _stompClientRef$curre === void 0 ? void 0 : _stompClientRef$curre.connected)) return;\n    var message = {\n      sender: username,\n      receiver: popUpUsername,\n      content: input,\n      type: 'CHAT'\n    };\n    stompClientRef.current.publish({\n      destination: '/app/chat.sendPrivate',\n      body: JSON.stringify(message)\n    });\n    setMessages(function (prev) {\n      return [].concat(_toConsumableArray(prev), [message]);\n    });\n    setInput('');\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"Chat with \", popUpUsername), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '300px',\n      overflowY: 'auto',\n      border: '1px solid #ccc',\n      marginBottom: '10px',\n      padding: '10px',\n      backgroundColor: '#f9f9f9'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, messages.map(function (msg, idx) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: idx,\n      style: {\n        textAlign: msg.sender === username ? 'right' : 'left',\n        marginBottom: '8px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: 'inline-block',\n        padding: '8px 12px',\n        borderRadius: '16px',\n        backgroundColor: msg.sender === username ? '#007bff' : '#e0e0e0',\n        color: msg.sender === username ? 'white' : 'black'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, msg.content));\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    value: input,\n    onChange: function onChange(e) {\n      return setInput(e.target.value);\n    },\n    placeholder: \"Type a message\",\n    style: {\n      width: '80%',\n      padding: '8px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    style: {\n      padding: '8px 16px',\n      marginLeft: '8px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Send\"));\n};\nexport default PrivateChatPopUpMessage;","map":{"version":3,"names":["React","useEffect","useRef","useState","Client","SockJS","useAuth","PrivateChatPopUpMessage","popUpUsername","authUser","username","user","messages","setMessages","input","setInput","isConnected","setIsConnected","stompClientRef","token","localStorage","getItem","socket","stompClient","webSocketFactory","connectHeaders","Authorization","reconnectDelay","onConnect","console","log","subscribe","message","msg","JSON","parse","body","Array","isArray","prev","publish","destination","stringify","sender","receiver","onStompError","frame","error","activate","current","deactivate","sendMessage","trim","connected","content","type","padding","height","overflowY","border","marginBottom","backgroundColor","map","idx","textAlign","display","borderRadius","color","e","target","value","width","marginLeft"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/app/views/applications/messagePopUp/PrivateChatPopUpMessage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Client } from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport { useAuth } from '../../hooks/useAuth'; // assuming you're using a custom auth hook\r\n\r\nconst PrivateChatPopUpMessage = ({ popUpUsername }) => {\r\n    const authUser = useAuth();\r\n    const username = authUser?.user?.username;\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const stompClientRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!username || !popUpUsername) return;\r\n\r\n        const token = localStorage.getItem('accessToken');\r\n        const socket = new SockJS(`http://localhost:8080/ws?token=${token}`);\r\n\r\n        const stompClient = new Client({\r\n            webSocketFactory: () => socket,\r\n            connectHeaders: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            reconnectDelay: 5000,\r\n            onConnect: () => {\r\n                console.log('✅ Connected to WebSocket');\r\n                setIsConnected(true);\r\n\r\n                // Subscribe to receive messages\r\n                stompClient.subscribe(`/user/${username}/queue/messages`, (message) => {\r\n                    const msg = JSON.parse(message.body);\r\n                    if (Array.isArray(msg)) {\r\n                        // Received old messages from DB\r\n                        setMessages(msg);\r\n                    } else {\r\n                        // Real-time message\r\n                        setMessages(prev => [...prev, msg]);\r\n                    }\r\n                });\r\n\r\n                // Fetch message history from backend\r\n                stompClient.publish({\r\n                    destination: '/app/chat.getMessages',\r\n                    body: JSON.stringify({\r\n                        sender: username,\r\n                        receiver: popUpUsername,\r\n                    }),\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error('❌ STOMP Error', frame);\r\n            },\r\n        });\r\n\r\n        stompClient.activate();\r\n        stompClientRef.current = stompClient;\r\n\r\n        return () => {\r\n            stompClient.deactivate();\r\n        };\r\n    }, [username, popUpUsername]);\r\n\r\n    const sendMessage = () => {\r\n        if (!input.trim() || !popUpUsername || !stompClientRef.current?.connected) return;\r\n\r\n        const message = {\r\n            sender: username,\r\n            receiver: popUpUsername,\r\n            content: input,\r\n            type: 'CHAT',\r\n        };\r\n\r\n        stompClientRef.current.publish({\r\n            destination: '/app/chat.sendPrivate',\r\n            body: JSON.stringify(message),\r\n        });\r\n\r\n        setMessages(prev => [...prev, message]);\r\n        setInput('');\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: '20px' }}>\r\n            <h2>Chat with {popUpUsername}</h2>\r\n            <div\r\n                style={{\r\n                    height: '300px',\r\n                    overflowY: 'auto',\r\n                    border: '1px solid #ccc',\r\n                    marginBottom: '10px',\r\n                    padding: '10px',\r\n                    backgroundColor: '#f9f9f9'\r\n                }}\r\n            >\r\n                {messages.map((msg, idx) => (\r\n                    <div\r\n                        key={idx}\r\n                        style={{\r\n                            textAlign: msg.sender === username ? 'right' : 'left',\r\n                            marginBottom: '8px',\r\n                        }}\r\n                    >\r\n                        <span\r\n                            style={{\r\n                                display: 'inline-block',\r\n                                padding: '8px 12px',\r\n                                borderRadius: '16px',\r\n                                backgroundColor: msg.sender === username ? '#007bff' : '#e0e0e0',\r\n                                color: msg.sender === username ? 'white' : 'black',\r\n                            }}\r\n                        >\r\n                            {msg.content}\r\n                        </span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <input\r\n                value={input}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                placeholder=\"Type a message\"\r\n                style={{ width: '80%', padding: '8px' }}\r\n            />\r\n            <button onClick={sendMessage} style={{ padding: '8px 16px', marginLeft: '8px' }}>\r\n                Send\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrivateChatPopUpMessage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}