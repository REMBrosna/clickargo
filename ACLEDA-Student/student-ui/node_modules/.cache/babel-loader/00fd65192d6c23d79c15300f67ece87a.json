{"ast":null,"code":"'use strict';\n\nvar url = require('url');\nvar punycode = require('punycode');\nvar queryString = require('query-string');\nvar prependHttp = require('prepend-http');\nvar sortKeys = require('sort-keys');\nvar objectAssign = require('object-assign');\nvar DEFAULT_PORTS = {\n  'http:': 80,\n  'https:': 443,\n  'ftp:': 21\n};\n\n// protocols that always contain a `//`` bit\nvar slashedProtocol = {\n  'http': true,\n  'https': true,\n  'ftp': true,\n  'gopher': true,\n  'file': true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n};\nfunction testParameter(name, filters) {\n  return filters.some(function (filter) {\n    return filter instanceof RegExp ? filter.test(name) : filter === name;\n  });\n}\nmodule.exports = function (str, opts) {\n  opts = objectAssign({\n    normalizeProtocol: true,\n    normalizeHttps: false,\n    stripFragment: true,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeDirectoryIndex: false\n  }, opts);\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  var hasRelativeProtocol = str.indexOf('//') === 0;\n\n  // prepend protocol\n  str = prependHttp(str.trim()).replace(/^\\/\\//, 'http://');\n  var urlObj = url.parse(str);\n  if (opts.normalizeHttps && urlObj.protocol === 'https:') {\n    urlObj.protocol = 'http:';\n  }\n  if (!urlObj.hostname && !urlObj.pathname) {\n    throw new Error('Invalid URL');\n  }\n\n  // prevent these from being used by `url.format`\n  delete urlObj.host;\n  delete urlObj.query;\n\n  // remove fragment\n  if (opts.stripFragment) {\n    delete urlObj.hash;\n  }\n\n  // remove default port\n  var port = DEFAULT_PORTS[urlObj.protocol];\n  if (Number(urlObj.port) === port) {\n    delete urlObj.port;\n  }\n\n  // remove duplicate slashes\n  if (urlObj.pathname) {\n    urlObj.pathname = urlObj.pathname.replace(/\\/{2,}/g, '/');\n  }\n\n  // decode URI octets\n  if (urlObj.pathname) {\n    urlObj.pathname = decodeURI(urlObj.pathname);\n  }\n\n  // remove directory index\n  if (opts.removeDirectoryIndex === true) {\n    opts.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n  if (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length) {\n    var pathComponents = urlObj.pathname.split('/');\n    var lastComponent = pathComponents[pathComponents.length - 1];\n    if (testParameter(lastComponent, opts.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, pathComponents.length - 1);\n      urlObj.pathname = pathComponents.slice(1).join('/') + '/';\n    }\n  }\n\n  // resolve relative paths, but only for slashed protocols\n  if (slashedProtocol[urlObj.protocol]) {\n    var domain = urlObj.protocol + '//' + urlObj.hostname;\n    var relative = url.resolve(domain, urlObj.pathname);\n    urlObj.pathname = relative.replace(domain, '');\n  }\n  if (urlObj.hostname) {\n    // IDN to Unicode\n    urlObj.hostname = punycode.toUnicode(urlObj.hostname).toLowerCase();\n\n    // remove trailing dot\n    urlObj.hostname = urlObj.hostname.replace(/\\.$/, '');\n\n    // remove `www.`\n    if (opts.stripWWW) {\n      urlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n    }\n  }\n\n  // remove URL with empty query string\n  if (urlObj.search === '?') {\n    delete urlObj.search;\n  }\n  var queryParameters = queryString.parse(urlObj.search);\n\n  // remove query unwanted parameters\n  if (Array.isArray(opts.removeQueryParameters)) {\n    for (var key in queryParameters) {\n      if (testParameter(key, opts.removeQueryParameters)) {\n        delete queryParameters[key];\n      }\n    }\n  }\n\n  // sort query parameters\n  urlObj.search = queryString.stringify(sortKeys(queryParameters));\n\n  // decode query parameters\n  urlObj.search = decodeURIComponent(urlObj.search);\n\n  // take advantage of many of the Node `url` normalizations\n  str = url.format(urlObj);\n\n  // remove ending `/`\n  if (opts.removeTrailingSlash || urlObj.pathname === '/') {\n    str = str.replace(/\\/$/, '');\n  }\n\n  // restore relative protocol, if applicable\n  if (hasRelativeProtocol && !opts.normalizeProtocol) {\n    str = str.replace(/^http:\\/\\//, '//');\n  }\n  return str;\n};","map":{"version":3,"names":["url","require","punycode","queryString","prependHttp","sortKeys","objectAssign","DEFAULT_PORTS","slashedProtocol","testParameter","name","filters","some","filter","RegExp","test","module","exports","str","opts","normalizeProtocol","normalizeHttps","stripFragment","stripWWW","removeQueryParameters","removeTrailingSlash","removeDirectoryIndex","TypeError","hasRelativeProtocol","indexOf","trim","replace","urlObj","parse","protocol","hostname","pathname","Error","host","query","hash","port","Number","decodeURI","Array","isArray","length","pathComponents","split","lastComponent","slice","join","domain","relative","resolve","toUnicode","toLowerCase","search","queryParameters","key","stringify","decodeURIComponent","format"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/node_modules/normalize-url/index.js"],"sourcesContent":["'use strict';\nvar url = require('url');\nvar punycode = require('punycode');\nvar queryString = require('query-string');\nvar prependHttp = require('prepend-http');\nvar sortKeys = require('sort-keys');\nvar objectAssign = require('object-assign');\n\nvar DEFAULT_PORTS = {\n\t'http:': 80,\n\t'https:': 443,\n\t'ftp:': 21\n};\n\n// protocols that always contain a `//`` bit\nvar slashedProtocol = {\n\t'http': true,\n\t'https': true,\n\t'ftp': true,\n\t'gopher': true,\n\t'file': true,\n\t'http:': true,\n\t'https:': true,\n\t'ftp:': true,\n\t'gopher:': true,\n\t'file:': true\n};\n\nfunction testParameter(name, filters) {\n\treturn filters.some(function (filter) {\n\t\treturn filter instanceof RegExp ? filter.test(name) : filter === name;\n\t});\n}\n\nmodule.exports = function (str, opts) {\n\topts = objectAssign({\n\t\tnormalizeProtocol: true,\n\t\tnormalizeHttps: false,\n\t\tstripFragment: true,\n\t\tstripWWW: true,\n\t\tremoveQueryParameters: [/^utm_\\w+/i],\n\t\tremoveTrailingSlash: true,\n\t\tremoveDirectoryIndex: false\n\t}, opts);\n\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tvar hasRelativeProtocol = str.indexOf('//') === 0;\n\n\t// prepend protocol\n\tstr = prependHttp(str.trim()).replace(/^\\/\\//, 'http://');\n\n\tvar urlObj = url.parse(str);\n\n\tif (opts.normalizeHttps && urlObj.protocol === 'https:') {\n\t\turlObj.protocol = 'http:';\n\t}\n\n\tif (!urlObj.hostname && !urlObj.pathname) {\n\t\tthrow new Error('Invalid URL');\n\t}\n\n\t// prevent these from being used by `url.format`\n\tdelete urlObj.host;\n\tdelete urlObj.query;\n\n\t// remove fragment\n\tif (opts.stripFragment) {\n\t\tdelete urlObj.hash;\n\t}\n\n\t// remove default port\n\tvar port = DEFAULT_PORTS[urlObj.protocol];\n\tif (Number(urlObj.port) === port) {\n\t\tdelete urlObj.port;\n\t}\n\n\t// remove duplicate slashes\n\tif (urlObj.pathname) {\n\t\turlObj.pathname = urlObj.pathname.replace(/\\/{2,}/g, '/');\n\t}\n\n\t// decode URI octets\n\tif (urlObj.pathname) {\n\t\turlObj.pathname = decodeURI(urlObj.pathname);\n\t}\n\n\t// remove directory index\n\tif (opts.removeDirectoryIndex === true) {\n\t\topts.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n\t}\n\n\tif (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length) {\n\t\tvar pathComponents = urlObj.pathname.split('/');\n\t\tvar lastComponent = pathComponents[pathComponents.length - 1];\n\n\t\tif (testParameter(lastComponent, opts.removeDirectoryIndex)) {\n\t\t\tpathComponents = pathComponents.slice(0, pathComponents.length - 1);\n\t\t\turlObj.pathname = pathComponents.slice(1).join('/') + '/';\n\t\t}\n\t}\n\n\t// resolve relative paths, but only for slashed protocols\n\tif (slashedProtocol[urlObj.protocol]) {\n\t\tvar domain = urlObj.protocol + '//' + urlObj.hostname;\n\t\tvar relative = url.resolve(domain, urlObj.pathname);\n\t\turlObj.pathname = relative.replace(domain, '');\n\t}\n\n\tif (urlObj.hostname) {\n\t\t// IDN to Unicode\n\t\turlObj.hostname = punycode.toUnicode(urlObj.hostname).toLowerCase();\n\n\t\t// remove trailing dot\n\t\turlObj.hostname = urlObj.hostname.replace(/\\.$/, '');\n\n\t\t// remove `www.`\n\t\tif (opts.stripWWW) {\n\t\t\turlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n\t\t}\n\t}\n\n\t// remove URL with empty query string\n\tif (urlObj.search === '?') {\n\t\tdelete urlObj.search;\n\t}\n\n\tvar queryParameters = queryString.parse(urlObj.search);\n\n\t// remove query unwanted parameters\n\tif (Array.isArray(opts.removeQueryParameters)) {\n\t\tfor (var key in queryParameters) {\n\t\t\tif (testParameter(key, opts.removeQueryParameters)) {\n\t\t\t\tdelete queryParameters[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t// sort query parameters\n\turlObj.search = queryString.stringify(sortKeys(queryParameters));\n\n\t// decode query parameters\n\turlObj.search = decodeURIComponent(urlObj.search);\n\n\t// take advantage of many of the Node `url` normalizations\n\tstr = url.format(urlObj);\n\n\t// remove ending `/`\n\tif (opts.removeTrailingSlash || urlObj.pathname === '/') {\n\t\tstr = str.replace(/\\/$/, '');\n\t}\n\n\t// restore relative protocol, if applicable\n\tif (hasRelativeProtocol && !opts.normalizeProtocol) {\n\t\tstr = str.replace(/^http:\\/\\//, '//');\n\t}\n\n\treturn str;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}