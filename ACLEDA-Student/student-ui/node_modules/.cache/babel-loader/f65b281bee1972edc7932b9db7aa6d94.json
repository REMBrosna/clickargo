{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\src\\\\app\\\\views\\\\applications\\\\messagePopUp\\\\UserPopUpMessage.jsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport SockJS from \"sockjs-client\";\nimport { over } from \"stompjs\";\nvar UserPopUpMessage = function UserPopUpMessage() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    input = _useState4[0],\n    setInput = _useState4[1];\n  var stompClient = useRef(null);\n\n  // Connect to WebSocket with SockJS + STOMP\n  useEffect(function () {\n    var socket = new SockJS(\"http://localhost:8080/ws\"); // endpoint from backend config\n    stompClient.current = over(socket);\n    stompClient.current.connect({}, function () {\n      console.log(\"ðŸŸ¢ Connected to STOMP\");\n\n      // Subscribe to public topic\n      stompClient.current.subscribe(\"/topic/public\", function (message) {\n        var payload = JSON.parse(message.body);\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [payload]);\n        });\n      });\n\n      // Optional: notify user joined\n      stompClient.current.send(\"/app/chat.addUser\", {}, JSON.stringify({\n        sender: \"User\",\n        type: \"JOIN\"\n      }));\n    });\n    return function () {\n      if (stompClient.current) {\n        stompClient.current.disconnect(function () {\n          console.log(\"ðŸ”´ Disconnected\");\n        });\n      }\n    };\n  }, []);\n\n  // Send message to backend\n  var sendMessage = function sendMessage() {\n    if (input.trim() && stompClient.current) {\n      var chatMessage = {\n        sender: \"User\",\n        content: input,\n        type: \"CHAT\"\n      };\n      stompClient.current.send(\"/app/chat.sendMessage\", {}, JSON.stringify(chatMessage));\n      setInput(\"\");\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"WebSocket Chat with STOMP\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      border: \"1px solid gray\",\n      padding: 10,\n      height: 200,\n      overflowY: \"scroll\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, messages.map(function (msg, i) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 34\n      }\n    }, msg.sender, \":\"), \" \", msg.content);\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    value: input,\n    onChange: function onChange(e) {\n      return setInput(e.target.value);\n    },\n    onKeyDown: function onKeyDown(e) {\n      return e.key === \"Enter\" && sendMessage();\n    },\n    placeholder: \"Type message...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Send\"));\n};\nexport default UserPopUpMessage;","map":{"version":3,"names":["React","useEffect","useRef","useState","SockJS","over","UserPopUpMessage","messages","setMessages","input","setInput","stompClient","socket","current","connect","console","log","subscribe","message","payload","JSON","parse","body","prev","send","stringify","sender","type","disconnect","sendMessage","trim","chatMessage","content","padding","border","height","overflowY","map","msg","i","e","target","value","key"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/app/views/applications/messagePopUp/UserPopUpMessage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { over } from \"stompjs\";\r\n\r\nconst UserPopUpMessage = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState(\"\");\r\n    const stompClient = useRef(null);\r\n\r\n    // Connect to WebSocket with SockJS + STOMP\r\n    useEffect(() => {\r\n        const socket = new SockJS(\"http://localhost:8080/ws\"); // endpoint from backend config\r\n        stompClient.current = over(socket);\r\n\r\n        stompClient.current.connect({}, () => {\r\n            console.log(\"ðŸŸ¢ Connected to STOMP\");\r\n\r\n            // Subscribe to public topic\r\n            stompClient.current.subscribe(\"/topic/public\", (message) => {\r\n                const payload = JSON.parse(message.body);\r\n                setMessages(prev => [...prev, payload]);\r\n            });\r\n\r\n            // Optional: notify user joined\r\n            stompClient.current.send(\"/app/chat.addUser\", {}, JSON.stringify({ sender: \"User\", type: \"JOIN\" }));\r\n        });\r\n\r\n        return () => {\r\n            if (stompClient.current) {\r\n                stompClient.current.disconnect(() => {\r\n                    console.log(\"ðŸ”´ Disconnected\");\r\n                });\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    // Send message to backend\r\n    const sendMessage = () => {\r\n        if (input.trim() && stompClient.current) {\r\n            const chatMessage = {\r\n                sender: \"User\",\r\n                content: input,\r\n                type: \"CHAT\"\r\n            };\r\n\r\n            stompClient.current.send(\"/app/chat.sendMessage\", {}, JSON.stringify(chatMessage));\r\n            setInput(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h2>WebSocket Chat with STOMP</h2>\r\n            <div style={{ border: \"1px solid gray\", padding: 10, height: 200, overflowY: \"scroll\" }}>\r\n                {messages.map((msg, i) => (\r\n                    <div key={i}><strong>{msg.sender}:</strong> {msg.content}</div>\r\n                ))}\r\n            </div>\r\n            <input\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onKeyDown={e => e.key === \"Enter\" && sendMessage()}\r\n                placeholder=\"Type message...\"\r\n            />\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserPopUpMessage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}