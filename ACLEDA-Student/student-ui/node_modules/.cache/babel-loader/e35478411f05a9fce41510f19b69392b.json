{"ast":null,"code":"import _useMediaQuery from \"@material-ui/core/esm/useMediaQuery\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\src\\\\app\\\\MatxLayout\\\\MatxLayoutSFC.jsx\";\nimport React, { useContext, useEffect, useRef, useCallback } from \"react\";\nimport { MatxLayouts } from \"./index\";\nimport { useLocation } from \"react-router-dom\";\nimport { matchRoutes } from \"react-router-config\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport { setLayoutSettings } from \"app/redux/actions/LayoutActions\";\nimport { isEqual, merge } from \"lodash\";\nimport { MatxSuspense } from \"matx\";\nimport { useTheme } from \"@material-ui/core/styles\";\nvar MatxLayoutSFC = function MatxLayoutSFC(props) {\n  var theme = useTheme();\n  var dispatch = useDispatch();\n  var _useLocation = useLocation(),\n    pathname = _useLocation.pathname;\n  var appContext = useContext(AppContext);\n  var isMdScreen = _useMediaQuery(theme.breakpoints.down(\"md\"));\n  var settings = useSelector(function (state) {\n    return state.layout.settings;\n  });\n  var defaultSettings = useSelector(function (state) {\n    return state.layout.defaultSettings;\n  });\n  var ref = useRef({\n    appContext: appContext,\n    isMdScreen: isMdScreen,\n    settings: settings,\n    defaultSettings: defaultSettings\n  });\n  useEffect(function () {\n    var settings = ref.current.settings;\n    if (settings.layout1Settings.leftSidebar.show) {\n      var mode = isMdScreen ? \"close\" : \"full\";\n      dispatch(setLayoutSettings(merge({}, settings, {\n        layout1Settings: {\n          leftSidebar: {\n            mode: mode\n          }\n        }\n      })));\n    }\n  }, [isMdScreen, dispatch]);\n  var updateSettingsFromRouter = useCallback(function () {\n    var _ref$current = ref.current,\n      settings = _ref$current.settings,\n      defaultSettings = _ref$current.defaultSettings,\n      appContext = _ref$current.appContext,\n      isMdScreen = _ref$current.isMdScreen;\n    var routes = appContext.routes;\n    var matched = matchRoutes(routes, pathname)[0];\n    if (matched && matched.route.settings) {\n      // ROUTE HAS SETTINGS\n      var updatedSettings = merge({}, settings, matched.route.settings);\n      if (!isEqual(settings, updatedSettings)) {\n        dispatch(setLayoutSettings(isMdScreen ? merge({}, updatedSettings, {\n          layout1Settings: {\n            leftSidebar: {\n              mode: \"close\"\n            }\n          }\n        }) : updatedSettings));\n      }\n    } else if (!isEqual(settings, defaultSettings)) {\n      dispatch(setLayoutSettings(isMdScreen ? merge({}, defaultSettings, {\n        layout1Settings: {\n          leftSidebar: {\n            mode: \"close\"\n          }\n        }\n      }) : defaultSettings));\n    }\n  }, [pathname, dispatch]);\n  useEffect(function () {\n    updateSettingsFromRouter();\n  }, [updateSettingsFromRouter]);\n  var Layout = MatxLayouts[settings.activeLayout];\n  return /*#__PURE__*/React.createElement(MatxSuspense, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Layout, Object.assign({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  })));\n};\nexport default MatxLayoutSFC;","map":{"version":3,"names":["React","useContext","useEffect","useRef","useCallback","MatxLayouts","useLocation","matchRoutes","useDispatch","useSelector","AppContext","setLayoutSettings","isEqual","merge","MatxSuspense","useTheme","MatxLayoutSFC","props","theme","dispatch","pathname","appContext","isMdScreen","breakpoints","down","settings","state","layout","defaultSettings","ref","current","layout1Settings","leftSidebar","show","mode","updateSettingsFromRouter","routes","matched","route","updatedSettings","Layout","activeLayout"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/app/MatxLayout/MatxLayoutSFC.jsx"],"sourcesContent":["import React, { useContext, useEffect, useRef, useCallback } from \"react\";\r\nimport { MatxLayouts } from \"./index\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { matchRoutes } from \"react-router-config\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AppContext from \"app/appContext\";\r\nimport { setLayoutSettings } from \"app/redux/actions/LayoutActions\";\r\nimport { isEqual, merge } from \"lodash\";\r\nimport { MatxSuspense } from \"matx\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nconst MatxLayoutSFC = (props) => {\r\n  const theme = useTheme();\r\n  const dispatch = useDispatch();\r\n  const { pathname } = useLocation();\r\n  const appContext = useContext(AppContext);\r\n  const isMdScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n  const settings = useSelector((state) => state.layout.settings);\r\n  const defaultSettings = useSelector((state) => state.layout.defaultSettings);\r\n  const ref = useRef({ appContext, isMdScreen, settings, defaultSettings });\r\n\r\n  useEffect(() => {\r\n    let { settings } = ref.current;\r\n    if (settings.layout1Settings.leftSidebar.show) {\r\n      let mode = isMdScreen ? \"close\" : \"full\";\r\n      dispatch(\r\n        setLayoutSettings(\r\n          merge({}, settings, { layout1Settings: { leftSidebar: { mode } } })\r\n        )\r\n      );\r\n    }\r\n  }, [isMdScreen, dispatch]);\r\n\r\n\r\n  const updateSettingsFromRouter = useCallback(() => {\r\n    let { settings, defaultSettings, appContext, isMdScreen } = ref.current;\r\n    const { routes } = appContext;\r\n    const matched = matchRoutes(routes, pathname)[0];\r\n\r\n    if (matched && matched.route.settings) {\r\n      // ROUTE HAS SETTINGS\r\n      let updatedSettings = merge({}, settings, matched.route.settings);\r\n\r\n      if (!isEqual(settings, updatedSettings)) {\r\n        dispatch(\r\n          setLayoutSettings(\r\n            isMdScreen\r\n              ? merge({}, updatedSettings, {\r\n                layout1Settings: { leftSidebar: { mode: \"close\" } },\r\n              })\r\n              : updatedSettings\r\n          )\r\n        );\r\n      }\r\n    } else if (!isEqual(settings, defaultSettings)) {\r\n      dispatch(\r\n        setLayoutSettings(\r\n          isMdScreen\r\n            ? merge({}, defaultSettings, {\r\n              layout1Settings: { leftSidebar: { mode: \"close\" } },\r\n            })\r\n            : defaultSettings\r\n        )\r\n      );\r\n    }\r\n  }, [pathname, dispatch]);\r\n\r\n  useEffect(() => {\r\n    updateSettingsFromRouter();\r\n  }, [updateSettingsFromRouter]);\r\n\r\n  const Layout = MatxLayouts[settings.activeLayout];\r\n\r\n  return (\r\n    <MatxSuspense>\r\n      <Layout {...props} />\r\n    </MatxSuspense>\r\n  );\r\n};\r\n\r\nexport default MatxLayoutSFC;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}