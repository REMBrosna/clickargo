{"ast":null,"code":"import _InputAdornment from \"@material-ui/core/esm/InputAdornment\";\nimport _slicedToArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\src\\\\app\\\\c1component\\\\C1TextArea.jsx\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from 'prop-types';\nimport React, { useState } from \"react\";\nimport C1Version from \"./C1Version\";\n\n/**\r\n * @param label - form label for the field\r\n * @param name  - form name for the field\r\n * @param onChange - event handler\r\n * @param value - form value\r\n * @param disabled - boolean value to flag if field is disabled or not\r\n * @param required - boolean value to flag if field is required, it will be highlighted in yellow\r\n * @param type - can be file, input or date. Default is 'input'\r\n * @param multiline - boolean value to flag if field is multiline or a textarea\r\n * @param rows - no. of rows if the field is multiline\r\n * @param rowsMax - maximum no. of rows if the field is multiline\r\n * @param error - boolean value if the field has error upon validation\r\n * @param helperText - text to display if error occurs\r\n * @param select - boolean value to flag if the input field is select field\r\n * @param inputProps - additional props for input field\r\n * @param children - array of children to be passed to <TextField>, this is only applicable for select field.\r\n */\nvar C1TextArea = function C1TextArea(_ref) {\n  var label = _ref.label,\n    name = _ref.name,\n    onChange = _ref.onChange,\n    value = _ref.value,\n    disabled = _ref.disabled,\n    required = _ref.required,\n    type = _ref.type,\n    _ref$rows = _ref.rows,\n    rows = _ref$rows === void 0 ? 3 : _ref$rows,\n    _ref$rowsMax = _ref.rowsMax,\n    rowsMax = _ref$rowsMax === void 0 ? 3 : _ref$rowsMax,\n    textLimit = _ref.textLimit,\n    error = _ref.error,\n    helperText = _ref.helperText,\n    select = _ref.select,\n    inputProps = _ref.inputProps,\n    style = _ref.style,\n    changes = _ref.changes,\n    _ref$lock = _ref.lock,\n    lock = _ref$lock === void 0 ? false : _ref$lock,\n    children = _ref.children;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    valLen = _useState2[0],\n    setValLen = _useState2[1];\n  var onChangeLocal = function onChangeLocal(e) {\n    //Get the value and check if the length is greater than the textLimit\n    //if yes, then cut of based on the textLimit value\n    var str = e.target.value;\n    if (str.length > textLimit) {\n      e.target.value = str.substring(0, textLimit);\n    }\n    if (valLen <= textLimit - 1) {\n      onChange(e);\n      setValLen(e.target.value.length);\n    }\n  };\n  var onKeyDownLocal = function onKeyDownLocal(e) {\n    //This will deduct 1 to length every backspace\n    if (e.key === 'Backspace') {\n      setValLen(valLen > 0 ? valLen - 1 : 0);\n    }\n  };\n  if (textLimit === 256) {\n    rows = 3;\n    rowsMax = 6;\n  } else if (textLimit === 512) {\n    rows = 6;\n    rowsMax = 6;\n  }\n  //default is rows = 3; rowsMax=3\n\n  return /*#__PURE__*/React.createElement(TextField, {\n    margin: \"normal\",\n    label: label,\n    name: name,\n    type: type || 'input',\n    fullWidth: true,\n    multiline: true,\n    rows: rows,\n    rowsMax: rowsMax,\n    size: \"medium\",\n    variant: \"outlined\",\n    onChange: function onChange(e) {\n      return onChangeLocal(e);\n    },\n    onKeyDown: function onKeyDown(e) {\n      return onKeyDownLocal(e);\n    },\n    value: value,\n    disabled: lock ? true : disabled,\n    required: required,\n    InputLabelProps: {\n      shrink: true\n    },\n    helperText: helperText || \"\".concat(textLimit ? '(' + valLen + '/' + textLimit + \" characters)\" : ''),\n    error: error ? error : false,\n    select: select || false,\n    className: required ? \"C1-Required\" : '',\n    inputProps: inputProps,\n    style: style,\n    InputProps: {\n      endAdornment: changes ? /*#__PURE__*/React.createElement(_InputAdornment, {\n        position: \"end\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(C1Version, {\n        changes: changes,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 68\n        }\n      })) : null\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }\n  }, children);\n};\nC1TextArea.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.any,\n  textLimit: PropTypes.number,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n  multiline: PropTypes.bool,\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  error: PropTypes.bool,\n  helperText: PropTypes.string,\n  select: PropTypes.bool,\n  children: PropTypes.array\n};\nexport default C1TextArea;","map":{"version":3,"names":["TextField","PropTypes","React","useState","C1Version","C1TextArea","label","name","onChange","value","disabled","required","type","rows","rowsMax","textLimit","error","helperText","select","inputProps","style","changes","lock","children","valLen","setValLen","onChangeLocal","e","str","target","length","substring","onKeyDownLocal","key","shrink","endAdornment","propTypes","string","any","number","func","bool","multiline","oneOfType","array"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/app/c1component/C1TextArea.jsx"],"sourcesContent":["import { InputAdornment } from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport PropTypes from 'prop-types';\r\nimport React, { useState } from \"react\";\r\n\r\nimport C1Version from \"./C1Version\";\r\n\r\n/**\r\n * @param label - form label for the field\r\n * @param name  - form name for the field\r\n * @param onChange - event handler\r\n * @param value - form value\r\n * @param disabled - boolean value to flag if field is disabled or not\r\n * @param required - boolean value to flag if field is required, it will be highlighted in yellow\r\n * @param type - can be file, input or date. Default is 'input'\r\n * @param multiline - boolean value to flag if field is multiline or a textarea\r\n * @param rows - no. of rows if the field is multiline\r\n * @param rowsMax - maximum no. of rows if the field is multiline\r\n * @param error - boolean value if the field has error upon validation\r\n * @param helperText - text to display if error occurs\r\n * @param select - boolean value to flag if the input field is select field\r\n * @param inputProps - additional props for input field\r\n * @param children - array of children to be passed to <TextField>, this is only applicable for select field.\r\n */\r\nconst C1TextArea = ({\r\n    label,\r\n    name,\r\n    onChange,\r\n    value,\r\n    disabled,\r\n    required,\r\n    type,\r\n    rows = 3,\r\n    rowsMax = 3,\r\n    textLimit,\r\n    error,\r\n    helperText,\r\n    select,\r\n    inputProps,\r\n    style,\r\n    changes,\r\n    lock = false,\r\n    children\r\n}) => {\r\n\r\n    const [valLen, setValLen] = useState(0);\r\n    const onChangeLocal = (e) => {\r\n        //Get the value and check if the length is greater than the textLimit\r\n        //if yes, then cut of based on the textLimit value\r\n        let str = e.target.value;\r\n        if (str.length > textLimit) {\r\n            e.target.value = str.substring(0, textLimit);\r\n        }\r\n\r\n        if (valLen <= textLimit - 1) {\r\n            onChange(e);\r\n            setValLen(e.target.value.length);\r\n        }\r\n    }\r\n\r\n    const onKeyDownLocal = (e) => {\r\n        //This will deduct 1 to length every backspace\r\n        if (e.key === 'Backspace') {\r\n            setValLen(valLen > 0 ? valLen - 1 : 0);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    if (textLimit === 256) {\r\n        rows = 3;\r\n        rowsMax = 6;\r\n    } else if (textLimit === 512) {\r\n        rows = 6;\r\n        rowsMax = 6;\r\n    }\r\n    //default is rows = 3; rowsMax=3\r\n\r\n    return <TextField\r\n        margin=\"normal\"\r\n        label={label}\r\n        name={name}\r\n        type={type || 'input'}\r\n        fullWidth\r\n        multiline={true}\r\n        rows={rows}\r\n        rowsMax={rowsMax}\r\n        size=\"medium\"\r\n        variant=\"outlined\"\r\n        onChange={e => onChangeLocal(e)}\r\n        onKeyDown={e => onKeyDownLocal(e)}\r\n        value={value}\r\n        disabled={lock ? true : disabled}\r\n        required={required}\r\n        InputLabelProps={{\r\n            shrink: true\r\n        }}\r\n        helperText={helperText || `${textLimit ? '(' + valLen + '/' + textLimit + \" characters)\" : ''}`}\r\n        error={error ? error : false}\r\n        select={select || false}\r\n        className={required ? \"C1-Required\" : ''}\r\n        inputProps={inputProps}\r\n        style={style}\r\n        InputProps={{\r\n            endAdornment: changes ? <InputAdornment position=\"end\"><C1Version changes={changes} /></InputAdornment> : null\r\n        }}>\r\n        {children}\r\n    </TextField>;\r\n}\r\n\r\nC1TextArea.propTypes = {\r\n    label: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.any,\r\n    textLimit: PropTypes.number,\r\n    onChange: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    required: PropTypes.bool,\r\n    type: PropTypes.string,\r\n    multiline: PropTypes.bool,\r\n    rows: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    rowsMax: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    error: PropTypes.bool,\r\n    helperText: PropTypes.string,\r\n    select: PropTypes.bool,\r\n    children: PropTypes.array\r\n}\r\n\r\n\r\nexport default C1TextArea;"],"mappings":"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"},"metadata":{},"sourceType":"module"}