{"ast":null,"code":"import _Snackbar from \"@material-ui/core/esm/Snackbar\";\nimport _Button from \"@material-ui/core/esm/Button\";\nimport _Grid from \"@material-ui/core/esm/Grid\";\nimport _Box from \"@material-ui/core/esm/Box\";\nimport _toConsumableArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\src\\\\app\\\\views\\\\applications\\\\messagePopUp\\\\UserPopUpMessage.jsx\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useStyles } from \"../../../c1utils/styles\";\nimport C1TextArea from \"../../../c1component/C1TextArea\";\nimport C1Alert from \"../../../c1component/C1Alert\";\nimport { getValue } from \"../../../c1utils/utility\";\nimport useHttp from \"../../../c1hooks/http\";\nimport { useTranslation } from \"react-i18next\";\nimport { Client } from \"@stomp/stompjs\"; // Import STOMP client\nimport SockJS from \"sockjs-client\";\nvar UserPopUpMessage = function UserPopUpMessage(_ref) {\n  var _auth$user, _messageInput$message2;\n  var auth = _ref.auth,\n    initialSender = _ref.sender,\n    message = _ref.message,\n    initialReceiver = _ref.receiver,\n    handleOnClose = _ref.handleOnClose;\n  var sender = auth === null || auth === void 0 ? void 0 : (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user.id;\n  var receiver = initialReceiver;\n  var classes = useStyles();\n  var _useTranslation = useTranslation([\"job\"]),\n    t = _useTranslation.t;\n  var _useHttp = useHttp(),\n    isLoading = _useHttp.isLoading,\n    isFormSubmission = _useHttp.isFormSubmission,\n    res = _useHttp.res,\n    validation = _useHttp.validation,\n    error = _useHttp.error,\n    urlId = _useHttp.urlId,\n    sendRequest = _useHttp.sendRequest;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    errors = _useState4[0],\n    setErrors = _useState4[1];\n  var _useState5 = useState({\n      message: \"\",\n      receiver: receiver,\n      type: \"CHAT\"\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    messageInput = _useState6[0],\n    setMessageInput = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    messages = _useState8[0],\n    setMessages = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    socketConnected = _useState10[0],\n    setSocketConnected = _useState10[1];\n  var _useState11 = useState({\n      open: false,\n      vertical: \"top\",\n      horizontal: \"center\",\n      msg: \"\",\n      severity: \"success\"\n    }),\n    _useState12 = _slicedToArray(_useState11, 2),\n    snackBarState = _useState12[0],\n    setSnackBarState = _useState12[1];\n  var socketRef = useRef(null); // Reference for socket\n  var stompClientRef = useRef(null); // Ref for stomp client\n\n  // Fetch chat history\n  useEffect(function () {\n    if (sender && receiver) {\n      sendRequest(\"/\".concat(sender, \"/\").concat(receiver), \"FETCH\", \"GET\", null);\n    }\n  }, [sender, receiver]);\n\n  // Handle API responses\n  useEffect(function () {\n    if (!isLoading && !error && res && !validation) {\n      setLoading(false);\n      if (urlId === \"FETCH\") {\n        setMessages(res.data);\n      }\n    }\n    if (validation) {\n      setErrors(validation);\n      setLoading(false);\n    }\n  }, [isLoading, isFormSubmission, validation, error]);\n  var handleCloseSnackBar = function handleCloseSnackBar() {\n    setSnackBarState(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        open: false\n      });\n    });\n  };\n  var handleInputChange = function handleInputChange(e) {\n    var _e$target = e.target,\n      name = _e$target.name,\n      value = _e$target.value;\n    setMessageInput(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, name, value));\n    });\n  };\n  useEffect(function () {\n    var stompClient = new Client({\n      // âœ… Use SockJS factory instead of brokerURL\n      webSocketFactory: function webSocketFactory() {\n        return new SockJS(\"http://localhost:8080/ws\");\n      },\n      reconnectDelay: 5000,\n      onConnect: function onConnect(frame) {\n        console.log(\"Connected to STOMP server via SockJS\");\n        stompClient.subscribe(\"/user/\".concat(receiver, \"/queue/messages\"), function (messageOutput) {\n          console.log(\"Message received:\", messageOutput.body);\n          setMessages(function (prevMessages) {\n            return [].concat(_toConsumableArray(prevMessages), [JSON.parse(messageOutput.body)]);\n          });\n        });\n        setSocketConnected(true);\n      },\n      onDisconnect: function onDisconnect() {\n        setSocketConnected(false);\n      },\n      onStompError: function onStompError(frame) {\n        console.error(\"STOMP error\", frame);\n        setSocketConnected(false);\n        setSnackBarState({\n          open: true,\n          msg: \"STOMP error. Trying to reconnect...\",\n          severity: \"error\",\n          vertical: \"top\",\n          horizontal: \"center\"\n        });\n      }\n    });\n    stompClient.activate();\n    stompClientRef.current = stompClient;\n    return function () {\n      if (stompClientRef.current) {\n        stompClientRef.current.deactivate();\n      }\n    };\n  }, [receiver]);\n  var handleSendMessage = useCallback(function () {\n    var _messageInput$message;\n    if (!((_messageInput$message = messageInput.message) === null || _messageInput$message === void 0 ? void 0 : _messageInput$message.trim())) {\n      setSnackBarState({\n        open: true,\n        msg: \"Message cannot be empty\",\n        severity: \"warning\",\n        vertical: \"top\",\n        horizontal: \"center\"\n      });\n      return;\n    }\n    if (!socketConnected) {\n      setSnackBarState({\n        open: true,\n        msg: \"Not connected to server\",\n        severity: \"error\",\n        vertical: \"top\",\n        horizontal: \"center\"\n      });\n      return;\n    }\n    var payload = {\n      type: \"MESSAGE\",\n      content: messageInput.message,\n      sender: sender,\n      receiver: receiver,\n      timestamp: new Date().toISOString()\n    };\n    try {\n      stompClientRef.current.send(\"/app/chat/\".concat(receiver),\n      // Change this if needed\n      {}, JSON.stringify(payload));\n      setMessages(function (prev) {\n        var _auth$user2;\n        return [].concat(_toConsumableArray(prev), [_objectSpread(_objectSpread({}, payload), {}, {\n          status: \"sending\",\n          userSender: {\n            id: sender,\n            username: auth === null || auth === void 0 ? void 0 : (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.username\n          },\n          userReceiver: {\n            id: receiver\n          }\n        })]);\n      });\n      setMessageInput({\n        message: \"\"\n      });\n    } catch (err) {\n      console.error(\"Error sending message:\", err);\n      setSnackBarState({\n        open: true,\n        msg: \"Failed to send message\",\n        severity: \"error\",\n        vertical: \"top\",\n        horizontal: \"center\"\n      });\n    }\n  }, [messageInput, socketConnected, sender, receiver]);\n  var handleKeyPress = function handleKeyPress(e) {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(_Grid, {\n    container: true,\n    spacing: 2,\n    className: classes.gridContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Grid, {\n    item: true,\n    xs: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(_Box, {\n    style: {\n      height: \"300px\",\n      overflowY: \"auto\",\n      border: \"1px solid #e0e0e0\",\n      padding: \"12px\",\n      borderRadius: \"8px\",\n      backgroundColor: \"#f9f9f9\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 21\n    }\n  }, messages.map(function (msg, index) {\n    var _msg$userSender, _msg$userReceiver, _msg$userSender2;\n    var isSender = (msg === null || msg === void 0 ? void 0 : (_msg$userSender = msg.userSender) === null || _msg$userSender === void 0 ? void 0 : _msg$userSender.id) === sender;\n    var isReceiver = (msg === null || msg === void 0 ? void 0 : (_msg$userReceiver = msg.userReceiver) === null || _msg$userReceiver === void 0 ? void 0 : _msg$userReceiver.id) === sender;\n    if (isSender && isReceiver) return null; // avoid rendering self-sent-to-self message\n\n    return /*#__PURE__*/React.createElement(_Box, {\n      key: index,\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: isSender ? \"flex-end\" : \"flex-start\",\n        marginBottom: \"10px\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(_Box, {\n      style: {\n        backgroundColor: isSender ? \"#3f51b5\" : \"#e0e0e0\",\n        color: isSender ? \"#fff\" : \"#000\",\n        padding: \"10px 14px\",\n        borderRadius: \"18px\",\n        maxWidth: \"70%\",\n        wordBreak: \"break-word\",\n        boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\n        position: \"relative\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 37\n      }\n    }, !isSender && /*#__PURE__*/React.createElement(_Box, {\n      style: {\n        fontSize: \"0.85em\",\n        fontWeight: 600,\n        marginBottom: 4\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 45\n      }\n    }, msg === null || msg === void 0 ? void 0 : (_msg$userSender2 = msg.userSender) === null || _msg$userSender2 === void 0 ? void 0 : _msg$userSender2.username), msg.content, /*#__PURE__*/React.createElement(_Box, {\n      style: {\n        fontSize: \"0.75em\",\n        marginTop: 6,\n        color: isSender ? \"#e0e0ff\" : \"#555\",\n        textAlign: \"right\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 41\n      }\n    }, new Date(msg.timestamp).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    }), msg.status === \"sending\" && /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        marginLeft: 6\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 74\n      }\n    }, \"(Sending...)\"))));\n  }))), /*#__PURE__*/React.createElement(_Grid, {\n    item: true,\n    xs: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(C1TextArea, {\n    label: t(\"job:Enter your message\"),\n    name: \"message\",\n    value: getValue(messageInput === null || messageInput === void 0 ? void 0 : messageInput.message),\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    multiline: true,\n    textLimit: 1024,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(_Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      gap: \"10px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(_Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSendMessage,\n    disabled: !socketConnected || !((_messageInput$message2 = messageInput.message) === null || _messageInput$message2 === void 0 ? void 0 : _messageInput$message2.trim()),\n    style: {\n      color: \"#fff\",\n      minWidth: 100\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 21\n    }\n  }, t(\"job:Send\")), /*#__PURE__*/React.createElement(_Button, {\n    variant: \"outlined\",\n    color: \"secondary\",\n    onClick: handleOnClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 21\n    }\n  }, t(\"job:Close\")))), /*#__PURE__*/React.createElement(_Snackbar, {\n    anchorOrigin: {\n      vertical: snackBarState.vertical,\n      horizontal: snackBarState.horizontal\n    },\n    open: snackBarState.open,\n    autoHideDuration: 3000,\n    onClose: handleCloseSnackBar,\n    key: snackBarState.vertical + snackBarState.horizontal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(C1Alert, {\n    onClose: handleCloseSnackBar,\n    severity: snackBarState.severity,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }, snackBarState.msg)));\n};\nexport default UserPopUpMessage;","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","useStyles","C1TextArea","C1Alert","getValue","useHttp","useTranslation","Client","SockJS","UserPopUpMessage","auth","initialSender","sender","message","initialReceiver","receiver","handleOnClose","user","id","classes","t","isLoading","isFormSubmission","res","validation","error","urlId","sendRequest","loading","setLoading","errors","setErrors","type","messageInput","setMessageInput","messages","setMessages","socketConnected","setSocketConnected","open","vertical","horizontal","msg","severity","snackBarState","setSnackBarState","socketRef","stompClientRef","data","handleCloseSnackBar","prev","handleInputChange","e","target","name","value","stompClient","webSocketFactory","reconnectDelay","onConnect","frame","console","log","subscribe","messageOutput","body","prevMessages","JSON","parse","onDisconnect","onStompError","activate","current","deactivate","handleSendMessage","trim","payload","content","timestamp","Date","toISOString","send","stringify","status","userSender","username","userReceiver","err","handleKeyPress","key","shiftKey","preventDefault","gridContainer","height","overflowY","border","padding","borderRadius","backgroundColor","map","index","isSender","isReceiver","display","flexDirection","alignItems","marginBottom","color","maxWidth","wordBreak","boxShadow","position","fontSize","fontWeight","marginTop","textAlign","toLocaleTimeString","hour","minute","marginLeft","justifyContent","gap","minWidth"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/app/views/applications/messagePopUp/UserPopUpMessage.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { useStyles } from \"../../../c1utils/styles\";\r\nimport C1TextArea from \"../../../c1component/C1TextArea\";\r\nimport C1Alert from \"../../../c1component/C1Alert\";\r\nimport { getValue } from \"../../../c1utils/utility\";\r\nimport useHttp from \"../../../c1hooks/http\";\r\nimport { Grid, Box, Button, Snackbar } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Client } from \"@stomp/stompjs\"; // Import STOMP client\r\nimport SockJS from \"sockjs-client\";\r\n\r\nconst UserPopUpMessage = ({\r\n                              auth,\r\n                              sender: initialSender,\r\n                              message,\r\n                              receiver: initialReceiver,\r\n                              handleOnClose,\r\n                          }) => {\r\n    const sender = auth?.user?.id;\r\n    const receiver = initialReceiver;\r\n\r\n    const classes = useStyles();\r\n    const { t } = useTranslation([\"job\"]);\r\n    const { isLoading, isFormSubmission, res, validation, error, urlId, sendRequest } = useHttp();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [messageInput, setMessageInput] = useState({\r\n        message: \"\",\r\n        receiver: receiver,\r\n        type: \"CHAT\",\r\n    });\r\n    const [messages, setMessages] = useState([]);\r\n    const [socketConnected, setSocketConnected] = useState(false);\r\n\r\n    const [snackBarState, setSnackBarState] = useState({\r\n        open: false,\r\n        vertical: \"top\",\r\n        horizontal: \"center\",\r\n        msg: \"\",\r\n        severity: \"success\",\r\n    });\r\n\r\n    const socketRef = useRef(null); // Reference for socket\r\n    const stompClientRef = useRef(null); // Ref for stomp client\r\n\r\n    // Fetch chat history\r\n    useEffect(() => {\r\n        if (sender && receiver) {\r\n            sendRequest(`/${sender}/${receiver}`, \"FETCH\", \"GET\", null);\r\n        }\r\n    }, [sender, receiver]);\r\n\r\n    // Handle API responses\r\n    useEffect(() => {\r\n        if (!isLoading && !error && res && !validation) {\r\n            setLoading(false);\r\n            if (urlId === \"FETCH\") {\r\n                setMessages(res.data);\r\n            }\r\n        }\r\n        if (validation) {\r\n            setErrors(validation);\r\n            setLoading(false);\r\n        }\r\n    }, [isLoading, isFormSubmission, validation, error]);\r\n\r\n    const handleCloseSnackBar = () => {\r\n        setSnackBarState((prev) => ({ ...prev, open: false }));\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setMessageInput((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const stompClient = new Client({\r\n            // âœ… Use SockJS factory instead of brokerURL\r\n            webSocketFactory: () => new SockJS(\"http://localhost:8080/ws\"),\r\n            reconnectDelay: 5000,\r\n            onConnect: (frame) => {\r\n                console.log(\"Connected to STOMP server via SockJS\");\r\n\r\n                stompClient.subscribe(`/user/${receiver}/queue/messages`, (messageOutput) => {\r\n                    console.log(\"Message received:\", messageOutput.body);\r\n                    setMessages((prevMessages) => [\r\n                        ...prevMessages,\r\n                        JSON.parse(messageOutput.body),\r\n                    ]);\r\n                });\r\n\r\n                setSocketConnected(true);\r\n            },\r\n            onDisconnect: () => {\r\n                setSocketConnected(false);\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error(\"STOMP error\", frame);\r\n                setSocketConnected(false);\r\n                setSnackBarState({\r\n                    open: true,\r\n                    msg: \"STOMP error. Trying to reconnect...\",\r\n                    severity: \"error\",\r\n                    vertical: \"top\",\r\n                    horizontal: \"center\",\r\n                });\r\n            },\r\n        });\r\n\r\n        stompClient.activate();\r\n        stompClientRef.current = stompClient;\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.deactivate();\r\n            }\r\n        };\r\n    }, [receiver]);\r\n    const handleSendMessage = useCallback(() => {\r\n        if (!messageInput.message?.trim()) {\r\n            setSnackBarState({\r\n                open: true,\r\n                msg: \"Message cannot be empty\",\r\n                severity: \"warning\",\r\n                vertical: \"top\",\r\n                horizontal: \"center\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!socketConnected) {\r\n            setSnackBarState({\r\n                open: true,\r\n                msg: \"Not connected to server\",\r\n                severity: \"error\",\r\n                vertical: \"top\",\r\n                horizontal: \"center\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const payload = {\r\n            type: \"MESSAGE\",\r\n            content: messageInput.message,\r\n            sender: sender,\r\n            receiver: receiver,\r\n            timestamp: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            stompClientRef.current.send(\r\n                `/app/chat/${receiver}`, // Change this if needed\r\n                {},\r\n                JSON.stringify(payload)\r\n            );\r\n\r\n            setMessages((prev) => [\r\n                ...prev,\r\n                {\r\n                    ...payload,\r\n                    status: \"sending\",\r\n                    userSender: { id: sender, username: auth?.user?.username },\r\n                    userReceiver: { id: receiver },\r\n                },\r\n            ]);\r\n\r\n            setMessageInput({ message: \"\" });\r\n        } catch (err) {\r\n            console.error(\"Error sending message:\", err);\r\n            setSnackBarState({\r\n                open: true,\r\n                msg: \"Failed to send message\",\r\n                severity: \"error\",\r\n                vertical: \"top\",\r\n                horizontal: \"center\",\r\n            });\r\n        }\r\n    }, [messageInput, socketConnected, sender, receiver]);\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === \"Enter\" && !e.shiftKey) {\r\n            e.preventDefault();\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container spacing={2} className={classes.gridContainer}>\r\n                <Grid item xs={12}>\r\n                    <Box\r\n                        style={{\r\n                            height: \"300px\",\r\n                            overflowY: \"auto\",\r\n                            border: \"1px solid #e0e0e0\",\r\n                            padding: \"12px\",\r\n                            borderRadius: \"8px\",\r\n                            backgroundColor: \"#f9f9f9\",\r\n                        }}\r\n                    >\r\n                        {messages.map((msg, index) => {\r\n                            const isSender = msg?.userSender?.id === sender;\r\n                            const isReceiver = msg?.userReceiver?.id === sender;\r\n\r\n                            if (isSender && isReceiver) return null; // avoid rendering self-sent-to-self message\r\n\r\n                            return (\r\n                                <Box\r\n                                    key={index}\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        flexDirection: \"column\",\r\n                                        alignItems: isSender ? \"flex-end\" : \"flex-start\",\r\n                                        marginBottom: \"10px\",\r\n                                    }}\r\n                                >\r\n                                    <Box\r\n                                        style={{\r\n                                            backgroundColor: isSender ? \"#3f51b5\" : \"#e0e0e0\",\r\n                                            color: isSender ? \"#fff\" : \"#000\",\r\n                                            padding: \"10px 14px\",\r\n                                            borderRadius: \"18px\",\r\n                                            maxWidth: \"70%\",\r\n                                            wordBreak: \"break-word\",\r\n                                            boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\r\n                                            position: \"relative\",\r\n                                        }}\r\n                                    >\r\n                                        {!isSender && (\r\n                                            <Box style={{ fontSize: \"0.85em\", fontWeight: 600, marginBottom: 4 }}>\r\n                                                {msg?.userSender?.username}\r\n                                            </Box>\r\n                                        )}\r\n                                        {msg.content}\r\n                                        <Box\r\n                                            style={{\r\n                                                fontSize: \"0.75em\",\r\n                                                marginTop: 6,\r\n                                                color: isSender ? \"#e0e0ff\" : \"#555\",\r\n                                                textAlign: \"right\",\r\n                                            }}\r\n                                        >\r\n                                            {new Date(msg.timestamp).toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n                                            {msg.status === \"sending\" && <span style={{ marginLeft: 6 }}>(Sending...)</span>}\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                            );\r\n                        })}\r\n                    </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <C1TextArea\r\n                        label={t(\"job:Enter your message\")}\r\n                        name=\"message\"\r\n                        value={getValue(messageInput?.message)}\r\n                        onChange={handleInputChange}\r\n                        onKeyPress={handleKeyPress}\r\n                        multiline\r\n                        textLimit={1024}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"flex-end\", gap: \"10px\" }}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleSendMessage}\r\n                        disabled={!socketConnected || !messageInput.message?.trim()}\r\n                        style={{ color: \"#fff\", minWidth: 100 }}\r\n                    >\r\n                        {t(\"job:Send\")}\r\n                    </Button>\r\n\r\n                    <Button variant=\"outlined\" color=\"secondary\" onClick={handleOnClose}>\r\n                        {t(\"job:Close\")}\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: snackBarState.vertical,\r\n                    horizontal: snackBarState.horizontal,\r\n                }}\r\n                open={snackBarState.open}\r\n                autoHideDuration={3000}\r\n                onClose={handleCloseSnackBar}\r\n                key={snackBarState.vertical + snackBarState.horizontal}\r\n            >\r\n                <C1Alert onClose={handleCloseSnackBar} severity={snackBarState.severity}>\r\n                    {snackBarState.msg}\r\n                </C1Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserPopUpMessage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}