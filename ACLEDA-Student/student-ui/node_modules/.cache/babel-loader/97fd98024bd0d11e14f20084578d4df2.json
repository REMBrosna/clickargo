{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\src\\\\app\\\\views\\\\applications\\\\messagePopUp\\\\PrivateChatPopUpMessage.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nvar PrivateChatPopUpMessage = function PrivateChatPopUpMessage() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isConnected = _useState2[0],\n    setIsConnected = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    messages = _useState4[0],\n    setMessages = _useState4[1];\n  var stompClientRef = useRef(null);\n  var username = 'userA'; // Assuming the username comes from somewhere\n  var popUpUsername = 'userB'; // Assuming the username comes from somewhere\n\n  useEffect(function () {\n    if (!username) return;\n    var token = localStorage.getItem('accessToken');\n\n    // WebSocket connection using SockJS\n    var socket = new SockJS(\"http://localhost:8080/ws?token=\".concat(token));\n\n    // Creating the STOMP client\n    var stompClient = new Client({\n      webSocketFactory: function webSocketFactory() {\n        socket.onopen = function () {\n          // Injecting headers on WebSocket connection\n          socket.send('Authorization', \"Bearer \".concat(token));\n        };\n        return socket;\n      },\n      connectHeaders: {\n        Authorization: \"Bearer \".concat(token) // Make sure header is included\n      },\n\n      reconnectDelay: 5000,\n      onConnect: function onConnect() {\n        console.log('✅ Connected');\n        setIsConnected(true); // Track connection status\n\n        // Subscribe to the chat messages\n        stompClient.subscribe(\"/user/queue/messages\", function (message) {\n          var msg = JSON.parse(message.body);\n          setMessages(function (prev) {\n            return [].concat(_toConsumableArray(prev), [msg]);\n          });\n        });\n        stompClient.publish({\n          destination: \"/app/private-message\",\n          body: JSON.stringify({\n            sender: username,\n            receiver: popUpUsername,\n            content: \"Hello!\"\n          })\n        });\n      },\n      onStompError: function onStompError(frame) {\n        console.error('❌ STOMP Error', frame);\n      }\n    });\n\n    // Activate the client\n    stompClient.activate();\n    stompClientRef.current = stompClient;\n\n    // Cleanup on component unmount\n    return function () {\n      if (stompClientRef.current) {\n        stompClientRef.current.deactivate();\n      }\n    };\n  }, [username, popUpUsername]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, isConnected && /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  }, \"Connected to the WebSocket!\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, messages.map(function (message, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }, message.sender), \": \", message.content);\n  })));\n};\nexport default PrivateChatPopUpMessage;","map":{"version":3,"names":["React","useEffect","useRef","useState","SockJS","Client","PrivateChatPopUpMessage","isConnected","setIsConnected","messages","setMessages","stompClientRef","username","popUpUsername","token","localStorage","getItem","socket","stompClient","webSocketFactory","onopen","send","connectHeaders","Authorization","reconnectDelay","onConnect","console","log","subscribe","message","msg","JSON","parse","body","prev","publish","destination","stringify","sender","receiver","content","onStompError","frame","error","activate","current","deactivate","map","index"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/app/views/applications/messagePopUp/PrivateChatPopUpMessage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nconst PrivateChatPopUpMessage = () => {\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const stompClientRef = useRef(null);\r\n    const username = 'userA'; // Assuming the username comes from somewhere\r\n    const popUpUsername = 'userB'; // Assuming the username comes from somewhere\r\n\r\n    useEffect(() => {\r\n        if (!username) return;\r\n\r\n        const token = localStorage.getItem('accessToken');\r\n\r\n        // WebSocket connection using SockJS\r\n        const socket = new SockJS(`http://localhost:8080/ws?token=${token}`);\r\n\r\n\r\n        // Creating the STOMP client\r\n        const stompClient = new Client({\r\n            webSocketFactory: () => {\r\n                socket.onopen = () => {\r\n                    // Injecting headers on WebSocket connection\r\n                    socket.send('Authorization', `Bearer ${token}`);\r\n                };\r\n                return socket;\r\n            },\r\n            connectHeaders: {\r\n                Authorization: `Bearer ${token}`, // Make sure header is included\r\n            },\r\n            reconnectDelay: 5000,\r\n            onConnect: () => {\r\n                console.log('✅ Connected');\r\n                setIsConnected(true); // Track connection status\r\n\r\n                // Subscribe to the chat messages\r\n                stompClient.subscribe(`/user/queue/messages`, (message) => {\r\n                    const msg = JSON.parse(message.body);\r\n                    setMessages((prev) => [...prev, msg]);\r\n                });\r\n                stompClient.publish({\r\n                    destination: \"/app/private-message\",\r\n                    body: JSON.stringify({\r\n                        sender: username,\r\n                        receiver: popUpUsername,\r\n                        content: \"Hello!\"\r\n                    })\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error('❌ STOMP Error', frame);\r\n            },\r\n        });\r\n\r\n        // Activate the client\r\n        stompClient.activate();\r\n        stompClientRef.current = stompClient;\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.deactivate();\r\n            }\r\n        };\r\n    }, [username, popUpUsername]);\r\n\r\n    return (\r\n        <div>\r\n            {isConnected && <h2>Connected to the WebSocket!</h2>}\r\n            <div>\r\n                {messages.map((message, index) => (\r\n                    <div key={index}>\r\n                        <strong>{message.sender}</strong>: {message.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrivateChatPopUpMessage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}