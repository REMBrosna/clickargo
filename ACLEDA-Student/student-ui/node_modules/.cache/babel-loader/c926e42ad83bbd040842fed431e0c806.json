{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\src\\\\app\\\\views\\\\applications\\\\messagePopUp\\\\PrivateChatPopUpMessage.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nvar PrivateChatPopUpMessage = function PrivateChatPopUpMessage() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isConnected = _useState2[0],\n    setIsConnected = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    messages = _useState4[0],\n    setMessages = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    newMessage = _useState6[0],\n    setNewMessage = _useState6[1];\n  var stompClientRef = useRef(null);\n  var messagesEndRef = useRef(null);\n  var username = 'userA'; // Replace with dynamic username\n  var popUpUsername = 'userB'; // Replace with dynamic username\n\n  // const scrollToBottom = () => {\n  //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  // };\n\n  useEffect(function () {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(function () {\n    if (!username) return;\n    var token = localStorage.getItem('accessToken');\n\n    // WebSocket connection using SockJS\n    var socket = new SockJS(\"http://localhost:8080/ws?token=\".concat(token));\n\n    // Creating the STOMP client\n    var stompClient = new Client({\n      webSocketFactory: function webSocketFactory() {\n        return socket;\n      },\n      // Simply return the socket\n      connectHeaders: {\n        Authorization: \"Bearer \".concat(token)\n      },\n      reconnectDelay: 5000,\n      onConnect: function onConnect() {\n        console.log('✅ Connected');\n        setIsConnected(true);\n        stompClient.subscribe(\"/user/queue/messages\", function (message) {\n          var msg = JSON.parse(message.body);\n          setMessages(function (prev) {\n            return [].concat(_toConsumableArray(prev), [msg]);\n          });\n        });\n        stompClient.publish({\n          destination: '/app/private-message',\n          body: JSON.stringify({\n            sender: username,\n            receiver: popUpUsername,\n            content: 'Hello!'\n          })\n        });\n      },\n      onStompError: function onStompError(frame) {\n        console.error('❌ STOMP Error', frame);\n      }\n    });\n    stompClient.activate();\n    stompClientRef.current = stompClient;\n    return function () {\n      if (stompClientRef.current) {\n        stompClientRef.current.deactivate();\n      }\n    };\n  }, [username, popUpUsername]);\n  var handleSendMessage = function handleSendMessage(e) {\n    e.preventDefault();\n    if (newMessage.trim() && stompClientRef.current && isConnected) {\n      var message = {\n        sender: username,\n        receiver: popUpUsername,\n        content: newMessage\n      };\n      stompClientRef.current.publish({\n        destination: '/app/private-message',\n        body: JSON.stringify(message)\n      });\n      setMessages(function (prev) {\n        return [].concat(_toConsumableArray(prev), [message]);\n      });\n      setNewMessage('');\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Chat with \", popUpUsername), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"status \".concat(isConnected ? 'connected' : 'disconnected'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, isConnected ? 'Connected' : 'Disconnected')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, messages.map(function (message, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"message \".concat(message.sender === username ? 'sent' : 'received'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-content\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }, message.sender), /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, message.content)));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"message-input\",\n    onSubmit: handleSendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newMessage,\n    onChange: function onChange(e) {\n      return setNewMessage(e.target.value);\n    },\n    placeholder: \"Type a message...\",\n    disabled: !isConnected,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !isConnected,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"Send\")));\n};\nexport default PrivateChatPopUpMessage;","map":{"version":3,"names":["React","useEffect","useRef","useState","SockJS","Client","PrivateChatPopUpMessage","isConnected","setIsConnected","messages","setMessages","newMessage","setNewMessage","stompClientRef","messagesEndRef","username","popUpUsername","scrollToBottom","token","localStorage","getItem","socket","stompClient","webSocketFactory","connectHeaders","Authorization","reconnectDelay","onConnect","console","log","subscribe","message","msg","JSON","parse","body","prev","publish","destination","stringify","sender","receiver","content","onStompError","frame","error","activate","current","deactivate","handleSendMessage","e","preventDefault","trim","map","index","target","value"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/app/views/applications/messagePopUp/PrivateChatPopUpMessage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\n\r\nconst PrivateChatPopUpMessage = () => {\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const stompClientRef = useRef(null);\r\n    const messagesEndRef = useRef(null);\r\n    const username = 'userA'; // Replace with dynamic username\r\n    const popUpUsername = 'userB'; // Replace with dynamic username\r\n\r\n    // const scrollToBottom = () => {\r\n    //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    // };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        if (!username) return;\r\n\r\n        const token = localStorage.getItem('accessToken');\r\n\r\n        // WebSocket connection using SockJS\r\n        const socket = new SockJS(`http://localhost:8080/ws?token=${token}`);\r\n\r\n        // Creating the STOMP client\r\n        const stompClient = new Client({\r\n            webSocketFactory: () => socket, // Simply return the socket\r\n            connectHeaders: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            reconnectDelay: 5000,\r\n            onConnect: () => {\r\n                console.log('✅ Connected');\r\n                setIsConnected(true);\r\n\r\n                stompClient.subscribe(`/user/queue/messages`, (message) => {\r\n                    const msg = JSON.parse(message.body);\r\n                    setMessages((prev) => [...prev, msg]);\r\n                });\r\n\r\n                stompClient.publish({\r\n                    destination: '/app/private-message',\r\n                    body: JSON.stringify({\r\n                        sender: username,\r\n                        receiver: popUpUsername,\r\n                        content: 'Hello!',\r\n                    }),\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error('❌ STOMP Error', frame);\r\n            },\r\n        });\r\n\r\n        stompClient.activate();\r\n        stompClientRef.current = stompClient;\r\n\r\n        return () => {\r\n            if (stompClientRef.current) {\r\n                stompClientRef.current.deactivate();\r\n            }\r\n        };\r\n    }, [username, popUpUsername]);\r\n\r\n    const handleSendMessage = (e) => {\r\n        e.preventDefault();\r\n        if (newMessage.trim() && stompClientRef.current && isConnected) {\r\n            const message = {\r\n                sender: username,\r\n                receiver: popUpUsername,\r\n                content: newMessage,\r\n            };\r\n            stompClientRef.current.publish({\r\n                destination: '/app/private-message',\r\n                body: JSON.stringify(message),\r\n            });\r\n            setMessages((prev) => [...prev, message]);\r\n            setNewMessage('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-header\">\r\n                <h2>Chat with {popUpUsername}</h2>\r\n                <span className={`status ${isConnected ? 'connected' : 'disconnected'}`}>\r\n                    {isConnected ? 'Connected' : 'Disconnected'}\r\n                </span>\r\n            </div>\r\n            <div className=\"messages-container\">\r\n                {messages.map((message, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className={`message ${\r\n                            message.sender === username ? 'sent' : 'received'\r\n                        }`}\r\n                    >\r\n                        <div className=\"message-content\">\r\n                            <strong>{message.sender}</strong>\r\n                            <p>{message.content}</p>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n            <form className=\"message-input\" onSubmit={handleSendMessage}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                    disabled={!isConnected}\r\n                />\r\n                <button type=\"submit\" disabled={!isConnected}>\r\n                    Send\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrivateChatPopUpMessage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}