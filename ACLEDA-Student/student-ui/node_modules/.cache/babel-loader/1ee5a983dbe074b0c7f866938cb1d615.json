{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Collap Projects\\\\ACLEDA-Student\\\\student-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport Mock from \"../mock\";\nimport shortId from \"shortid\";\nvar NotificationDB = {\n  list: [{\n    id: shortId.generate(),\n    heading: \"Message\",\n    icon: {\n      name: \"chat\",\n      color: \"primary\"\n    },\n    timestamp: 1570702802573,\n    title: \"New message from Devid\",\n    subtitle: \"Hello, Any progress...\",\n    path: \"chat\"\n  }, {\n    id: shortId.generate(),\n    heading: \"Alert\",\n    icon: {\n      name: \"notifications\",\n      color: \"error\"\n    },\n    timestamp: 1570702702573,\n    title: \"Server overloaded\",\n    subtitle: \"Traffice reached 2M\",\n    path: \"page-layouts/user-profile\"\n  }, {\n    id: shortId.generate(),\n    heading: \"Message\",\n    icon: {\n      name: \"chat\",\n      color: \"primary\"\n    },\n    timestamp: 1570502502573,\n    title: \"New message from Goustove\",\n    subtitle: \"Hello, send me details\",\n    path: \"chat\"\n  }]\n};\nMock.onGet(\"/api/notification\").reply(function (config) {\n  var response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost(\"/api/notification/add\").reply(function (config) {\n  var response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost(\"/api/notification/delete\").reply(function (config) {\n  var _JSON$parse = JSON.parse(config.data),\n    id = _JSON$parse.id;\n  console.log(id);\n  var response = NotificationDB.list.filter(function (notification) {\n    return notification.id !== id;\n  });\n  NotificationDB.list = _toConsumableArray(response);\n  return [200, response];\n});\nMock.onPost(\"/api/notification/delete-all\").reply(function (config) {\n  NotificationDB.list = [];\n  var response = NotificationDB.list;\n  return [200, response];\n});","map":{"version":3,"names":["Mock","shortId","NotificationDB","list","id","generate","heading","icon","name","color","timestamp","title","subtitle","path","onGet","reply","config","response","onPost","JSON","parse","data","console","log","filter","notification"],"sources":["D:/Collap Projects/ACLEDA-Student/student-ui/src/fake-db/db/notification.js"],"sourcesContent":["import Mock from \"../mock\";\r\nimport shortId from \"shortid\";\r\n\r\nconst NotificationDB = {\r\n  list: [\r\n    {\r\n      id: shortId.generate(),\r\n      heading: \"Message\",\r\n      icon: {\r\n        name: \"chat\",\r\n        color: \"primary\"\r\n      },\r\n      timestamp: 1570702802573,\r\n      title: \"New message from Devid\",\r\n      subtitle: \"Hello, Any progress...\",\r\n      path: \"chat\"\r\n    },\r\n    {\r\n      id: shortId.generate(),\r\n      heading: \"Alert\",\r\n      icon: {\r\n        name: \"notifications\",\r\n        color: \"error\"\r\n      },\r\n      timestamp: 1570702702573,\r\n      title: \"Server overloaded\",\r\n      subtitle: \"Traffice reached 2M\",\r\n      path: \"page-layouts/user-profile\"\r\n    },\r\n    {\r\n      id: shortId.generate(),\r\n      heading: \"Message\",\r\n      icon: {\r\n        name: \"chat\",\r\n        color: \"primary\"\r\n      },\r\n      timestamp: 1570502502573,\r\n      title: \"New message from Goustove\",\r\n      subtitle: \"Hello, send me details\",\r\n      path: \"chat\"\r\n    }\r\n  ]\r\n};\r\n\r\nMock.onGet(\"/api/notification\").reply(config => {\r\n  const response = NotificationDB.list;\r\n  return [200, response];\r\n});\r\n\r\nMock.onPost(\"/api/notification/add\").reply(config => {\r\n  const response = NotificationDB.list;\r\n  return [200, response];\r\n});\r\n\r\nMock.onPost(\"/api/notification/delete\").reply(config => {\r\n  let { id } = JSON.parse(config.data);\r\n  console.log(id);\r\n\r\n  const response = NotificationDB.list.filter(\r\n    notification => notification.id !== id\r\n  );\r\n  NotificationDB.list = [...response];\r\n  return [200, response];\r\n});\r\n\r\nMock.onPost(\"/api/notification/delete-all\").reply(config => {\r\n  NotificationDB.list = [];\r\n  const response = NotificationDB.list;\r\n  return [200, response];\r\n});\r\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,OAAOC,OAAO,MAAM,SAAS;AAE7B,IAAMC,cAAc,GAAG;EACrBC,IAAI,EAAE,CACJ;IACEC,EAAE,EAAEH,OAAO,CAACI,QAAQ,EAAE;IACtBC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE;MACJC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE;IACT,CAAC;IACDC,SAAS,EAAE,aAAa;IACxBC,KAAK,EAAE,wBAAwB;IAC/BC,QAAQ,EAAE,wBAAwB;IAClCC,IAAI,EAAE;EACR,CAAC,EACD;IACET,EAAE,EAAEH,OAAO,CAACI,QAAQ,EAAE;IACtBC,OAAO,EAAE,OAAO;IAChBC,IAAI,EAAE;MACJC,IAAI,EAAE,eAAe;MACrBC,KAAK,EAAE;IACT,CAAC;IACDC,SAAS,EAAE,aAAa;IACxBC,KAAK,EAAE,mBAAmB;IAC1BC,QAAQ,EAAE,qBAAqB;IAC/BC,IAAI,EAAE;EACR,CAAC,EACD;IACET,EAAE,EAAEH,OAAO,CAACI,QAAQ,EAAE;IACtBC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE;MACJC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE;IACT,CAAC;IACDC,SAAS,EAAE,aAAa;IACxBC,KAAK,EAAE,2BAA2B;IAClCC,QAAQ,EAAE,wBAAwB;IAClCC,IAAI,EAAE;EACR,CAAC;AAEL,CAAC;AAEDb,IAAI,CAACc,KAAK,CAAC,mBAAmB,CAAC,CAACC,KAAK,CAAC,UAAAC,MAAM,EAAI;EAC9C,IAAMC,QAAQ,GAAGf,cAAc,CAACC,IAAI;EACpC,OAAO,CAAC,GAAG,EAAEc,QAAQ,CAAC;AACxB,CAAC,CAAC;AAEFjB,IAAI,CAACkB,MAAM,CAAC,uBAAuB,CAAC,CAACH,KAAK,CAAC,UAAAC,MAAM,EAAI;EACnD,IAAMC,QAAQ,GAAGf,cAAc,CAACC,IAAI;EACpC,OAAO,CAAC,GAAG,EAAEc,QAAQ,CAAC;AACxB,CAAC,CAAC;AAEFjB,IAAI,CAACkB,MAAM,CAAC,0BAA0B,CAAC,CAACH,KAAK,CAAC,UAAAC,MAAM,EAAI;EACtD,kBAAaG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAACK,IAAI,CAAC;IAA9BjB,EAAE,eAAFA,EAAE;EACRkB,OAAO,CAACC,GAAG,CAACnB,EAAE,CAAC;EAEf,IAAMa,QAAQ,GAAGf,cAAc,CAACC,IAAI,CAACqB,MAAM,CACzC,UAAAC,YAAY;IAAA,OAAIA,YAAY,CAACrB,EAAE,KAAKA,EAAE;EAAA,EACvC;EACDF,cAAc,CAACC,IAAI,sBAAOc,QAAQ,CAAC;EACnC,OAAO,CAAC,GAAG,EAAEA,QAAQ,CAAC;AACxB,CAAC,CAAC;AAEFjB,IAAI,CAACkB,MAAM,CAAC,8BAA8B,CAAC,CAACH,KAAK,CAAC,UAAAC,MAAM,EAAI;EAC1Dd,cAAc,CAACC,IAAI,GAAG,EAAE;EACxB,IAAMc,QAAQ,GAAGf,cAAc,CAACC,IAAI;EACpC,OAAO,CAAC,GAAG,EAAEc,QAAQ,CAAC;AACxB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}